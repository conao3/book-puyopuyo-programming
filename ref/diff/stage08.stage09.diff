diff -u -r stage08/www/src/config.js stage09/www/src/config.js
--- stage08/www/src/config.js	2025-10-19 16:59:28.550654558 +0900
+++ stage09/www/src/config.js	2025-10-19 16:59:28.660651079 +0900
@@ -30,4 +30,5 @@
 
     static playerFallingSpeed = 0.9; // プレイ中の自然落下のスピード
     static playerLockDelayFrames = 20; // 何フレーム接地したらぷよを固定するか
+    static playerDownSpeed = 10; // プレイ中の下キー押下時の落下スピード
 }
diff -u -r stage08/www/src/game.js stage09/www/src/game.js
--- stage08/www/src/game.js	2025-10-19 16:59:28.553654463 +0900
+++ stage09/www/src/game.js	2025-10-19 16:59:28.662651016 +0900
@@ -18,6 +18,9 @@
     // ステージを準備する
     Stage.initialize();
 
+    // プレイヤー操作を準備する
+    Player.initialize();
+
     // シーンを初期状態にセットする
     gameState = 'start';
     // フレームを初期化する
diff -u -r stage08/www/src/player.js stage09/www/src/player.js
--- stage08/www/src/player.js	2025-10-19 16:59:28.549654590 +0900
+++ stage09/www/src/player.js	2025-10-19 16:59:28.657651174 +0900
@@ -5,6 +5,60 @@
     static centerPuyoElement = null;
     static rotatingPuyoElement = null;
     static groundedFrame = 0;
+    static keyStatus = null;
+
+    static initialize() {
+        // キーボードの入力を確認する
+        Player.keyStatus = {
+            right: false,
+            left: false,
+            up: false,
+            down: false
+        };
+        // ブラウザのキーボードの入力を取得するイベントリスナを登録する
+        document.addEventListener('keydown', (event) => {
+            // キーボードが押された場合
+            switch (event.key) {
+                case "ArrowLeft": // 左向きキー
+                    Player.keyStatus.left = true;
+                    event.preventDefault();
+                    return;
+                case "ArrowUp": // 上向きキー
+                    Player.keyStatus.up = true;
+                    event.preventDefault();
+                    return;
+                case "ArrowRight": // 右向きキー
+                    Player.keyStatus.right = true;
+                    event.preventDefault();
+                    return;
+                case "ArrowDown": // 下向きキー
+                    Player.keyStatus.down = true;
+                    event.preventDefault();
+                    return;
+            }
+        });
+        document.addEventListener('keyup', (event) => {
+            // キーボードが離された場合
+            switch (event.key) {
+                case "ArrowLeft": // 左向きキー
+                    Player.keyStatus.left = false;
+                    event.preventDefault();
+                    return;
+                case "ArrowUp": // 上向きキー
+                    Player.keyStatus.up = false;
+                    event.preventDefault();
+                    return;
+                case "ArrowRight": // 右向きキー
+                    Player.keyStatus.right = false;
+                    event.preventDefault();
+                    return;
+                case "ArrowDown": // 下向きキー
+                    Player.keyStatus.down = false;
+                    event.preventDefault();
+                    return;
+            }
+        });
+    }
 
     // プレイヤーが操作するぷよを作る
     static createPlayerPuyo() {
@@ -55,13 +109,16 @@
     }
 
     // プレイヤーの操作ぷよを落下させる
-    static dropPlayerPuyo() {
+    static dropPlayerPuyo(isPressingDown) {
         let { x, y, dx, dy } = Player.playerPuyoStatus;
 
         // 現状のプレイヤーの操作ぷよの下にぷよがあるか確認する
         if (!Stage.getPuyoInfo(x, y + 1) && !Stage.getPuyoInfo(x + dx, y + dy + 1)) {
             // 中心ぷよ・回転するぷよ両方の下にぷよがないので、自由落下してよい
             Player.playerPuyoStatus.top += Config.playerFallingSpeed;
+            if (isPressingDown) {
+                Player.playerPuyoStatus.top += Config.playerDownSpeed;
+            }
             // 自由落下した際、マス目の境界を超えていないか確認する
             if (Math.floor(Player.playerPuyoStatus.top / Config.puyoImageHeight) != y) {
                 // ブロックの境を超えたので、自分の位置をひとつ下にずらす
@@ -105,7 +162,7 @@
     // イベントループで現在の状況を更新する
     static update() {
         // まずプレイヤーの操作ぷよを落下させる
-        if (Player.dropPlayerPuyo()) {
+        if (Player.dropPlayerPuyo(Player.keyStatus.down)) {
             // 接地が終わったら、ぷよを固定する
             return "fix";
         }
