diff -u -r stage14/www/index.html stage15/www/index.html
--- stage14/www/index.html	2025-10-19 16:59:28.825645861 +0900
+++ stage15/www/index.html	2025-10-19 16:59:29.254632295 +0900
@@ -3,6 +3,7 @@
 
 <head>
     <title>ぷよぷよプログラミングを体験してみよう ! </title>
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
     <script src="https://cdn.jsdelivr.net/npm/web-console-log"></script>
     <script src="src/config.js"></script>
     <script src="src/stage.js"></script>
@@ -12,7 +13,7 @@
     <script src="src/score.js"></script>
 </head>
 
-<body style="margin: 0;">
+<body style="margin: 0; transform-origin: 50% 0; user-select: none; -webkit-user-select: none; overflow: hidden;">
     <div id="next" style="position: relative; margin: 0 auto; overflow: hidden;">
     </div>
     <div id="stage" style="position:relative; margin: 0 auto; overflow: hidden; background: url(img/puyo_4bg.png)">
diff -u -r stage14/www/src/game.js stage15/www/src/game.js
--- stage14/www/src/game.js	2025-10-19 17:42:22.339731740 +0900
+++ stage15/www/src/game.js	2025-10-19 17:42:22.346731513 +0900
@@ -3,6 +3,12 @@
   // まずステージを整える
   initialize();
 
+  // 画面の高さに合わせて拡大する
+  const scale =
+    window.innerHeight /
+    (Score.scoreElement.offsetTop + Score.scoreElement.offsetHeight);
+  document.body.style.transform = 'scale(' + scale + ')';
+
   // ゲームループを開始する
   gameLoop();
 });
diff -u -r stage14/www/src/player.js stage15/www/src/player.js
--- stage14/www/src/player.js	2025-10-19 17:42:22.345731545 +0900
+++ stage15/www/src/player.js	2025-10-19 17:42:22.352731318 +0900
@@ -64,6 +64,57 @@
           return;
       }
     });
+    // タッチ入力でキー入力をエミュレートする
+    let pageX = 0,
+      pageY = 0;
+    // タッチ入力が始まった
+    document.addEventListener('touchstart', (event) => {
+      // 最初にタッチされた位置を覚えておく
+      const touch = event.touches[0];
+      pageX = touch.pageX;
+      pageY = touch.pageY;
+    });
+    // タッチ入力しながら指を動かした
+    document.addEventListener('touchmove', (event) => {
+      // 現在のキー入力情報を取得する
+      let { left, right, up, down } = Player.keyStatus;
+      // もし既にどれかのキーが押されていたら、そのままにしておく
+      if (left || right || up || down) {
+        return;
+      }
+      // まだキー入力がされていなければ、スワイプを検知する
+      const touch = event.touches[0];
+      const dx = touch.pageX - pageX;
+      const dy = touch.pageY - pageY;
+      if (dx ** 2 + dy ** 2 < 5 ** 2) {
+        // 移動量が小さすぎる場合、まだ入力を受け付けない
+        return;
+      }
+      // どの方向にスワイプされたかを判定する
+      if (Math.abs(dx) > Math.abs(dy)) {
+        if (dx > 0) {
+          right = true;
+        } else {
+          left = true;
+        }
+      } else {
+        if (dy > 0) {
+          down = true;
+        } else {
+          up = true;
+        }
+      }
+      Player.keyStatus = { left, right, up, down };
+    });
+    // 指を離した
+    document.addEventListener('touchend', (evnet) => {
+      Player.keyStatus = {
+        left: false,
+        right: false,
+        up: false,
+        down: false,
+      };
+    });
   }
 
   // プレイヤーが操作するぷよを作る
