diff -u -r stage10/www/src/config.js stage11/www/src/config.js
--- stage10/www/src/config.js	2025-10-19 16:59:28.491656424 +0900
+++ stage11/www/src/config.js	2025-10-19 16:59:29.089637513 +0900
@@ -32,4 +32,5 @@
     static playerLockDelayFrames = 20; // 何フレーム接地したらぷよを固定するか
     static playerDownSpeed = 10; // プレイ中の下キー押下時の落下スピード
     static playerMoveFrames = 10; // 左右移動に消費するフレーム数
+    static playerRotateFrames = 10; // 回転に消費するフレーム数
 }
diff -u -r stage10/www/src/game.js stage11/www/src/game.js
--- stage10/www/src/game.js	2025-10-19 16:59:28.493656361 +0900
+++ stage11/www/src/game.js	2025-10-19 16:59:29.091637450 +0900
@@ -84,7 +84,7 @@
         case 'playing':
             // プレイヤーが操作する状態
             const nextAction = Player.update(frame);
-            gameState = nextAction; // 'playing' 'fix' 'moving' のどれかが帰ってくる
+            gameState = nextAction; // 'playing' 'fix' 'moving' 'rotating' のどれかが帰ってくる
             break;
         case 'fix':
             // 現在の位置でぷよを固定する状態
@@ -99,6 +99,12 @@
                 gameState = 'playing';
             }
             break;
+        case 'rotating':
+            if (Player.rotatePlayerPuyo(frame)) {
+                // 回転が終わったので操作可能にする
+                gameState = 'playing';
+            }
+            break;
     }
     frame++;
     setTimeout(gameLoop, 1000 / 60); // 1/60秒後にもう一度呼び出す
diff -u -r stage10/www/src/player.js stage11/www/src/player.js
--- stage10/www/src/player.js	2025-10-19 16:59:28.488656519 +0900
+++ stage11/www/src/player.js	2025-10-19 16:59:29.087637576 +0900
@@ -9,6 +9,9 @@
     static actionStartFrame = 0;
     static moveSource = 0;
     static moveDestination = 0;
+    static rotateBeforeLeft = 0;
+    static rotateAfterLeft = 0;
+    static rotateFromRotation = 0;
 
     static initialize() {
         // キーボードの入力を確認する
@@ -216,6 +219,79 @@
                 Player.playerPuyoStatus.x += mx;
                 return 'moving';
             }
+        } else if (Player.keyStatus.up) {
+            // 回転を確認する
+            // 本当に回せるかどうかは後で確認して、とりあえず仮想的に回してみる
+            const x = Player.playerPuyoStatus.x;
+            // プレイヤー操作ぷよが接地しておらず落下している場合は、現在の座標よりも一つ下の座標を基準にする
+            const y = Player.playerPuyoStatus.y + (Player.groundedFrame === 0 ? 1 : 0);
+            const rotation = Player.playerPuyoStatus.rotation;
+            let canRotate = true;
+
+            let cx = 0;
+            let cy = 0;
+            if (rotation === 0) {
+                // 右から上には 100% 確実に回せる。何もしない
+            } else if (rotation === 90) {
+                // 上から左に回すときに、左にぷよがあれば右に移動する必要がある
+                // まず左側を確認する
+                if (Stage.getPuyoInfo(x - 1, y)) {
+                    // 左側にぷよがある。右に1個ずれる必要がある
+                    cx = 1;
+                    // ずれる必要がある時に、右側にもぷよがあれば、その時は回転できない
+                    if (Stage.getPuyoInfo(x + 1, y)) {
+                        canRotate = false;
+                    }
+                }
+            } else if (rotation === 180) {
+                // 左から下に回す時には、自分の下か左下にぷよがあれば1個上に引き上げる
+                // まず下を確認する
+                if (Stage.getPuyoInfo(x, y + 1)) {
+                    // 左側にぷよがあるので引き上げる
+                    cy = -1;
+                }
+                // 左下も確認する
+                if (Stage.getPuyoInfo(x - 1, y + 1)) {
+                    // 左下にぷよがあるので引き上げる
+                    cy = -1;
+                }
+            } else if (rotation === 270) {
+                // 下から右に回すときは、右にぷよがあれば左に移動する必要がある
+                // まず右側を確認する
+                if (Stage.getPuyoInfo(x + 1, y)) {
+                    // 右側にぷよがあるので、左に 1 個ずれる必要がある
+                    cx = -1;
+                    // ずれる必要がある時に、左側にもぷよがあれば、その時は回転できない
+                    if (Stage.getPuyoInfo(x - 1, y)) {
+                        // ぷよがあるので回転できなかった
+                        canRotate = false;
+                    }
+                }
+            }
+
+            if (canRotate) {
+                // 上に移動する必要があるときは、アニメーションせずに一気にあげてしまう
+                if (cy === -1) {
+                    if (Player.groundedFrame > 0) {
+                        // 接地しているなら1段引き上げる
+                        Player.playerPuyoStatus.y -= 1;
+                        Player.groundedFrame = 0;
+                    }
+                    Player.playerPuyoStatus.top = Player.playerPuyoStatus.y * Config.puyoImageHeight;
+                }
+                // 回すことが出来るので、回転後の情報をセットして回転状態にする
+                Player.actionStartFrame = frame;
+                Player.rotateBeforeLeft = x * Config.puyoImageHeight;
+                Player.rotateAfterLeft = (x + cx) * Config.puyoImageHeight;
+                Player.rotateFromRotation = Player.playerPuyoStatus.rotation;
+                // 次の状態を先に設定しておく
+                Player.playerPuyoStatus.x += cx;
+                const nextRotation = (Player.playerPuyoStatus.rotation + 90) % 360;
+                const dCombi = [[1, 0], [0, -1], [-1, 0], [0, 1]][nextRotation / 90];
+                Player.playerPuyoStatus.dx = dCombi[0];
+                Player.playerPuyoStatus.dy = dCombi[1];
+                return 'rotating';
+            }
         }
 
         return "playing";
@@ -236,6 +312,29 @@
         // ぷよの表示位置を変化させる
         Player.setPlayerPuyoPosition();
 
+        if (ratio === 1) {
+            // アニメーションが終了していたら true
+            return true;
+        }
+        return false;
+    }
+
+    // ぷよを回転させる
+    static rotatePlayerPuyo(frame) {
+        // 回転中も自然落下はさせる
+        Player.dropPlayerPuyo(false);
+
+        // 移動・回転割合を計算する
+        let ratio = (frame - Player.actionStartFrame) / Config.playerRotateFrames;
+        if (ratio > 1) {
+            // 1 を超えた場合は 1 にする
+            ratio = 1;
+        }
+        Player.playerPuyoStatus.left = (Player.rotateAfterLeft - Player.rotateBeforeLeft) * ratio + Player.rotateBeforeLeft;
+        Player.playerPuyoStatus.rotation = (Player.rotateFromRotation + ratio * 90) % 360;
+        // ぷよの表示位置を変化させる
+        Player.setPlayerPuyoPosition();
+
         if (ratio === 1) {
             // アニメーションが終了していたら true
             return true;
